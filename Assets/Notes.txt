1- Var, Object ve Dynamic: her türlü değişken türünü tutmanı sağlar
var = hangi değişkeni atarsak o değişkeni alır
object = var gibi istediğin değişkeni tutabilirsin fakat farklı bir değişkene eşitleyince dönüştürme yapman gerekir intNumber.ToString(); gibi
dynamic
*NOT:* dynamic runtime içinde hata verir ama object direkt solution'da hata verir. mesela dönüştürme yapmadan dynamic kullanılabilir ama object kullanılamaz. 

2- CODE

3- Lists:
listName.Remove(8) = listedeki 8 sayısını direkt siler fakat RemoveAt kullanırsan indekstekini siler
BinarySearch() = yazdığın değişkenin indexi kaçsa sana onu verir

4- Params:
parametrede verilecek değerin ne kadar fazla olduğunu bilmiyorsan bu kullanılır.
çok boyutlu diziler kullanılamaz
eğer paramdan farklı yine paramter ekleyeceksen ilk o gelir params en sona eklenir çünkü paramın nerede biteceği belli değildir sonu yok.

5- Const: sabit değer demektir.
const float = 3.14f; gibi kullanılır. Bir defa set edildiği için daha değiştirilemez.

6- Class: Aynı kod bütünlüğünün yazıldığı alandır

7- Access Modifiers (erişim belirleyiciler):
public: her classtan ulaşılabilir
private: sadece o classtan erişilebilir
internal: aynı assembly yani projedeki her yerden ulaşılabilir. Başka assembly'lerden erişilemez.

8- Constructor (Kurucu): Class'lar ile kullanılır
İçinde oluşturulduğu anda ilk çalışan metoddur.

9- Overload: aşırı yükleme yani farklı parametre şekilleriyle kullanılabilir.
aynı şekilde sınıfları constructorlar ile overload işlemi yapabilirsin.

10- Enum: 
bunların eşitliğini kontrol ederken Equals kullanmak daha iyi == yerine.
sen atama yapmasan bile listelerdeki gibi hepsinin index değeri vardır.
Enum. diyerek çeşitli işlemler yaptırabilirsin.

11- Encapsullation (kapsülleme): Dışarıya bilgi vermeden veriye çekme ve atama yapılır.
Field: sınıf veya yapı içinde tanımlanan değişkenlerdir.
*propfull ve prop diye kısayolları vardır oluşturmak için.
*oluşturulan property'de harfler fonksiyon yapısındaki gibi olmalıdır.

12- Inheritance (kalıtım-miras): Farklı bir class'tan başka bir class üretmektir. iç içe class denilebilir.
Eğer farklı 2 class ortak bilgilere sahip olma durumu varsa bu kullanılır örneğin insan ve zombi yürür bu yüzden humonoid ana class oluşturulabilir.
Derived Class: türettiğin insan zombi sınıfı olur
Base Class: Humonoid class'ı.
*Her zaman ilk base class'tan itibaren kod okunmaya başlar. Ve C# çoklu kalıtım desteklemek yani , koyup bir base class daha ekleymezsin.

13- Base Anahtar Kelimesi:
* Örneğin A base classın var ve b devired kalıtım yapılmış class'ın var ikisinde de aynı fonksiyon adı var fakat sen b classın'Da bir fonksiyon çağırırken hangisini seçecek
-kafası karışıyor bu yüzden base. yaparsan ana classı seçer eğer düz yazarsan olduğun class'takini çağırır.
* constructor ile kullanımında public A(int x):base(x){} gibi kullanılır öncelik vermek için veya hangisini çalıştıracağını anlatmak için
bunu kullanmanın sebebi base class boş construct yapısını oynatır eğer yanını bunu yazarsan aynı türden parametreleri oynatır.

14- Protected - protected internal:
Protected: Kendisinden türetilmiş olan class'larda kullanılabilir sadece.
Protected internal: aynı projelerde olmasa bile türetilmiş class'lardan erişilebilir.

15- This: bulunduğu class'ı işaret eder.
* public A(int x, int y, int z):this(x) verilirse eğer parametresi x olan constructor'da çalışacaktır. çünkü ilk çağırdığımızda 3 değer veriyoruz fakat x başta eşitleniyor o yüzden bu kullanılır.

16- Readonly: sadece okunabilir demek ve daha sonra değiştirelemez sadece okunabilir
Direkt çağıralamaz ilk başta sınıfın oluşturulması gerekiyor
mesela const'ta değeri direkt vermen gerekir ama readonly'de istersen consrtuctor'da verebilirsin.

17- Değer ve Referans Tipleri: stack / heap
değer tipleri: stacki işaret eder. int float double uint struct etc...
referans tipleri: stack'den heapi gösterir. class,object,array,interface,delegate,string
* stack değerlerini farklı classtan çağırıp değişiklik yaparak yazdırırsan değişimi göremezsin fakat heap ile yaparsan görebilirsin çünkü değişkeni üstüne yazılıp tutulur.

18- Ref and Out: bir değişken kopyalanarak gelip değerini değiştirip göremiyorsan o zaman kullanılır
ref: direkt objeye vermek istediğin değeri yazacağın zaman verirsin bunu stack veri yani değer tipleriyle kullanırsın genelde
out: bir fonksiyondan örneğin bir değeri return etmeden dışarı çıkarmada kullanılır
* prop'lar ile birlikte kullanılamaz/ paramtre ve çağıralacak yerde hangisini kullanıysan 2 yerdede başına onu yazman gerekir.

19- Static and Non-Static: 
Static: bunu yaptığın zaman nesneden bağımsız olur ve her yerden çağrılabilir. Nesnenin içinden çağıramazsın
*Nesneden bağımsız olduğu için hangi değeri atarsan her yerde o geçerli olur.
*Constructor ile işlem yaptırırsan o kayıtlı kalır
*static class'larda kalıtım olmaz ve static class içindeki her şey static olmalıdır. Constructor'da public vs yazamazsın static olur sadece

20- New anahtarı: 
*Bu derived class'ın ve base classta aynı değişken veya obje varsa derived class'ta konulur ki bizim yaptığımız belli etmek için. Çünkü override etmemiş oluyoruz yeni bir fonksiyon gibi.

21- Garbage Collection and Destructor (yıkıcı metod)
GC: stack'taki değerler (örneğin A test = new A(); ) heap'e işaret ettiği için yani new A(); olmadığı için burayı etkilemez fakat new A(); yani işaret edilmiyorsa bir şeye eşitlenmemişse (gereksizleri) onu siler. GC.Collect(); ile siler.
*Eğer heap çok doluysa OutOfMemoryException (hafıza dolu) hatası alırsın ve kötü bir kod demektir bu.
*GC'da generation vardır yani stack'tan işaret verilmemişse (bir değere eşitlenmemişse) onları siler ama hala bağı olan varsa onlar jenerasyon atlar ve 0 -1 -2 diye gider.
Destructor: Nesne silinmeden önce çalışır ve sonra nesne silinir. ~MyClass(){ //Code } şeklinde kullanılır.

22- CODE! Exception (istisnalar) ve Throw Anahtar Kelimesi:
*Exeption hata mesajıdır throw <degiskenAdi>; ile kullanılır. Bir sürü farklı exeption vardır.

23- Exception Handling & Try Catch finally (hata ayıklama): kodları deneyerek hata varmı yok mu bakar.
* Try'la birlikte catch vs kullanılması gerek catch içinde aynı şekil. Örneğin catch'te 5/0 işlemi yaptın ama program hata döndürür bunu catch ile yakalayıp debug yazdırabilirsin.
catch if gibi kontrol edilerek örneğin int istedin string yazdı catch(FormatException ex) ile birden fazla catch açıp kontrol yaparak istediğin catch'in çalışmasını sağlayabilirsin. ve catch içindeki ex ilede ek özelliklerini kullanabilirsin. örn. ex.StackTree hatanın path ve satırını söyler.
yukarıdaki örnek için catch(Exception ex) diyerek konsola ex.Message yazdırırsan zaten hatanın nereden kaynaklandığını söyler.
Inner Exception: alt hatadır yani eğer try'daki yer çalışmıyorsa exception'da inner olan çalışır ve catch'e gider.
Finally: Try'da çalışsa catch'de çalışsa bu her zaman çalışır kullanmak zorunlu değildir. Örn. SQL bağlantısı yaptın internette sorun var catch çalıştır sonra adamı finally ile programdan at.

24- CODE! Extension Methods (genişletme metotları): 
Örneğin string bir degiskenim olsun stringVar.ToUpper(); yerine stringVar.BuyukHarfler(); tarzında değiştirip eklemek.
*Bunu oluştururken static class içinde olmalı değişkenleriyle birlikte.

25- CODE! Operator Overloading:
*Örneğin 2 tane string ya da interger'ı + ile toplayabilirsin fakat class'ı toplayamazsın. Onu yapmanı sağlıyor

26- Method Override (virtual - override) metot ezme:
* kalıtım yapıp eğer aynı metotu kullanırsan new eklemek zorundasın ama base class'a virtual ekleyip kalıtım yaptığında override edersen oradaki fonksiyonun içini yok sayar
* eğer kalıtım yapıp aynı metodu kullanırsan ve new anahtar sözcüğünü verirsen direkt base class kullanılır.
* Bunları property'ler ile de kullanabilirsin.

27- Polymorphism: Derived class üzerinden ana class'a ulaşmak. Yani bir class'ın başka classtaki özelliklerini taşıması ve onu kullanmamız
static = compile time (overloading): Base classtan türemiş olan örneğin C class'ın base class özelliğini taşıması.
dynamic = runtime (overriding)
* A m = new B(); eğer A base class'ın ve B kalıtım yaptığın class ise B üzerinden A'daki değere ulaşabilirsin.
* <BaseClass> a(değişken) = new <DerivedClass>(); şeklinde kullanılır.

28- Sealed (mühürlü):
*Class'larda kullanırsan inhertance yani class türetemezsin.
*Property'ler ile kullanacaksan override etmen gerekir.
* Eğer iç içe 2 kalıtım yapıldıysa fonksiyonda override'dan önce sealed yaparsan sonraki inheritance yapılan class'larda kullanmazsın.

29- Partial (parçalı-bölünmüş): Kod okunabilirliği için aslında. 2 tane aynı isimde class'ın başına bunu ekleyerek farklı yerlerde kulalnabilirsin.
Eğer farklı değişkenler versen bile o 1 tanedir fakat farklı yerlerde kullandığın için partial ekliyorsun.
* Eğer herhangi bir yerdens static class olarak veya sealed olarak belirlersen diğerinede otomatik yükleniyor
* Fonksiyonlarda ise kapsülleme gibi yeni fonksiyon açıp oradan çağırarak kullanılabilir.

30-  Dispose Metodu (elden çıkarma - ortadan kaldırma) IDisposable.Dispose hazır interface yapısıdır :

31- Using Anahtar Kelimesi: dahil etmektir. Kütüphaneleri direkt ekleyerek referans kullanmadan metot vs çağırma yapabilirsin.

32- Struct: 
*Class ile çok karıştırlır farkları vardır.
*Struct = value stack(büyük veri taşınamaz demek) 16 byte altındaki veriler için. Verilerin net sonradan değişkenlik göstermemesi gerekir.
Default olarak constructor'u yoktur parametre alarak oluşturulabilir. Herhangi bir değişkene default değer atanamaz.
MyStruct isim; olursa örneğin constructor çalışmaz ve içindeki değerler direkt kullanılamaz ama class gibi new ile oluşturulursa yapılabilir.
*Class = ref heap

33- Abstract Class (soyutlama):
*abstract'lar interface'e benzer yapı olarak sadece. Yani içinde oluşturulan fonksiyonların derived edilen class'larda kullanılma zorunluluğu vardır.
*abstract ile nesne üretilemez referans alınabilir. İçindeki değere polymorphism ile ulaşabilirsin.

34- Interface:
*Bir şeyi çoklu yapı ile kullanıdığında interface tanımlanır ve hepsine kendi başına işlem yaptırabilirsin.

*Abstract ve Interface Farkları:
Abstract- constructor kullanılabilir. fonksiyon içlerinde bir şeyler yaptırabilirsin. Erişim belirleyicisi kullanılabilir. Override edilmelidir.
Interface- constructor kullanılamaz. Her şeyin soyut olması gerek {} açamazsın. Varsayılan public olduğu için erişim belirleyicisi kullanamazsın. Direkt uygulanır.

35- Operators:
?? işareti soluna bakar eğer null ise sağdaki işlemi yaptırır. döngü şeklinde gidebilir.

36- Nested Class (iç içe sınıflar): kod okunabilirliği ve kapsüllemede kullanılır.
class Damar { public class Kan { } } şeklinde kullanılır. Kapsüllemeye benzer ama bunda direkt class içine class oluşturuyorsun türetmek değil.

37- Global anahtar kelimesi:
*Eğer bir üst tarafta boşlukta vs aynı class'ta senin namepsace içinde aynısı varsa eğer üstekini kullanmak istiyorsan global:: şeklinde kullanılır.

38- Generic Tipler: Bunlar cast işleminden kuratarır hangi değeri verirsen onu alır.

39- Delegate: Çoklu metod çağırma olarak kullanılır.
*public delegate void MyDelegate(string message); şeklinde kullanılır.

40- Events:
İçlerinde add remove kullanabilirsin tıpku propertylerdeki gibi event çalışınca ve çıkarılınca çalışaack gibi.
Eventhandler: sender ve everntargs alıyor. sender gönderen eventargs ise içinde verileri değerleri tutan yer oluyor.















































